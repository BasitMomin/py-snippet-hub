import pandas as pd


def handle_missing_values(
    df: pd.DataFrame,
    strategy: str = 'drop',
    columns: list = None,
    fill_value=None,
    interpolation_method: str = 'linear'
) -> pd.DataFrame:
    """
    Handle missing values in a DataFrame.
    
    Parameters:
    - df: Input DataFrame
    - strategy: 'drop' | 'fill' | 'interpolate'
    - columns: List of columns to apply the strategy; if None, apply to all columns
    - fill_value: Value to use when strategy='fill'
    - interpolation_method: Method for interpolation (pandas.DataFrame.interpolate)

    Returns:
    - Cleaned DataFrame
    """
    df_clean = df.copy()
    cols = columns if columns is not None else df_clean.columns

    if strategy == 'drop':
        df_clean = df_clean.dropna(subset=cols)
    elif strategy == 'fill':
        df_clean[cols] = df_clean[cols].fillna(fill_value)
    elif strategy == 'interpolate':
        df_clean[cols] = df_clean[cols].interpolate(method=interpolation_method)
    else:
        raise ValueError("strategy must be 'drop', 'fill', or 'interpolate'")

    return df_clean


def remove_duplicates(
    df: pd.DataFrame,
    subset: list = None,
    keep: str = 'first'
) -> pd.DataFrame:
    """
    Remove duplicate rows from a DataFrame.
    
    Parameters:
    - df: Input DataFrame
    - subset: List of columns to consider for identifying duplicates; if None, use all columns
    - keep: 'first' | 'last' | False (drop all duplicates)

    Returns:
    - DataFrame with duplicates removed
    """
    df_clean = df.copy()
    df_clean = df_clean.drop_duplicates(subset=subset, keep=keep)
    return df_clean


def change_column_types(
    df: pd.DataFrame,
    dtype_map: dict
) -> pd.DataFrame:
    """
    Change data types of specified columns.

    Parameters:
    - df: Input DataFrame
    - dtype_map: Dictionary mapping column names to desired data types,
      e.g. {'date_col': 'datetime64', 'col': 'float'}

    Returns:
    - DataFrame with updated column types
    """
    df_copy = df.copy()
    for col, dtype in dtype_map.items():
        if 'datetime' in dtype:
            df_copy[col] = pd.to_datetime(df_copy[col])
        else:
            df_copy[col] = df_copy[col].astype(dtype)
    return df_copy
