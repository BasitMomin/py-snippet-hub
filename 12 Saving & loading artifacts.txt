'''
Model Training and Evaluation Snippet
-------------------------------------

Functions for:
- Training a scikit-learn model
- Evaluating classification models (accuracy, precision, recall, F1, confusion matrix)
- Evaluating regression models (MAE, MSE, RMSE, R2)
- Performing cross-validation

Usage:
    from model_training_evaluation import (
        train_model,
        evaluate_classification,
        evaluate_regression,
        cross_validate_model
    )

Placeholders:
    model: scikit-learn estimator instance (e.g., RandomForestClassifier())
    X_train, X_test, y_train, y_test: pandas DataFrames or numpy arrays
    scoring: list of metric names or scoring string
    cv: int, number of folds for cross-validation
'''

import numpy as np
from sklearn.model_selection import cross_val_score
from sklearn.metrics import (
    accuracy_score,
    precision_score,
    recall_score,
    f1_score,
    confusion_matrix,
    mean_absolute_error,
    mean_squared_error,
    r2_score
)

def train_model(model, X_train, y_train):
    """
    Train a scikit-learn model.

    Parameters:
        model: Unfitted scikit-learn estimator
        X_train: Features for training
        y_train: Target for training

    Returns:
        Fitted model
    """
    return model.fit(X_train, y_train)


def evaluate_classification(model, X_test, y_test, average: str = 'binary') -> dict:
    """
    Evaluate a classification model.

    Parameters:
        model: Fitted classification model
        X_test: Features for testing
        y_test: True labels
        average: Averaging method for multi-class ('binary', 'macro', 'micro')

    Returns:
        Dict of metrics: accuracy, precision, recall, f1, confusion_matrix
    """
    y_pred = model.predict(X_test)
    metrics = {
        'accuracy': accuracy_score(y_test, y_pred),
        'precision': precision_score(y_test, y_pred, average=average, zero_division=0),
        'recall': recall_score(y_test, y_pred, average=average, zero_division=0),
        'f1_score': f1_score(y_test, y_pred, average=average, zero_division=0),
        'confusion_matrix': confusion_matrix(y_test, y_pred)
    }
    return metrics


def evaluate_regression(model, X_test, y_test) -> dict:
    """
    Evaluate a regression model.

    Parameters:
        model: Fitted regression model
        X_test: Features for testing
        y_test: True target values

    Returns:
        Dict of metrics: MAE, MSE, RMSE, R2
    """
    y_pred = model.predict(X_test)
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_test, y_pred)
    return {
        'MAE': mae,
        'MSE': mse,
        'RMSE': rmse,
        'R2': r2
    }


def cross_validate_model(model, X, y, scoring=None, cv: int = 5) -> dict:
    """
    Perform k-fold cross-validation.

    Parameters:
        model: scikit-learn estimator
        X: Features
        y: Target
        scoring: None or string/multi-metric
        cv: Number of folds

    Returns:
        Dict with 'scores' array and 'mean_score'
    """
    scores = cross_val_score(model, X, y, scoring=scoring, cv=cv)
    return {
        'scores': scores,
        'mean_score': np.mean(scores)
    }
